name: Create Time Series Sequences
description: Generates input-output sequences from normalized time series data grouped by component ID.

inputs:
  - { name: json_data, type: JsonArray }
  - { name: input_len, type: Integer }
  - { name: output_len, type: Integer }

outputs:
  - { name: X_sequences, type: NumpyArray }
  - { name: y_sequences, type: NumpyArray }

implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet pandas numpy || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet pandas numpy --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import pandas as pd
        import numpy as np
        import json
        import argparse
        import os

        def create_sequences(df, input_len, output_len):
            X, y = [], []
            grouped = df.groupby('component_id')
            for _, group in grouped:
                values = group[['value_norm', 'component_id']].values
                for i in range(len(values) - input_len - output_len):
                    X.append(values[i:i + input_len])
                    y.append(values[i + input_len:i + input_len + output_len, 0])
            return np.array(X), np.array(y)

        parser = argparse.ArgumentParser()
        parser.add_argument("--json_data", type=str, required=True)
        parser.add_argument("--input_len", type=int, required=True)
        parser.add_argument("--output_len", type=int, required=True)
        parser.add_argument("--X_sequences", type=str)
        parser.add_argument("--y_sequences", type=str)
        args = parser.parse_args()

        # Load JSON input
        with open(args.json_data, "r") as f:
            data = json.load(f)
        df = pd.DataFrame(data)

        X, y = create_sequences(df, args.input_len, args.output_len)

        # Save NumPy arrays
        os.makedirs(os.path.dirname(args.X_sequences), exist_ok=True)
        os.makedirs(os.path.dirname(args.y_sequences), exist_ok=True)

        np.save(args.X_sequences, X)
        np.save(args.y_sequences, y)

        print(f"Generated {len(X)} input-output sequence pairs.")
    args:
      - --json_data
      - { inputPath: json_data }
      - --input_len
      - { inputValue: input_len }
      - --output_len
      - { inputValue: output_len }
      - --X_sequences
      - { outputPath: X_sequences }
      - --y_sequences
      - { outputPath: y_sequences }
