name: Universal Model Fine-tuning Inline
description: Fine-tunes a model using HuggingFace or PyTorch code, all logic inline (no train.py required).
inputs:
  - name: task_type
    type: String
    description: Task type (e.g. text_classification)
  - name: dataset_name
    type: String
    description: Dataset identifier
  - name: model_uri
    type: String
    description: Model hub ID or path
  - name: framework
    type: String
    description: 'huggingface' or 'pytorch'
  - name: output_dir
    type: String
    description: Output dir
  - name: epochs
    type: Integer
    description: Number of epochs
    default: 1
outputs:
  - name: trained_model
    type: Directory
    description: Fine-tuned model
  - name: training_logs
    type: Directory
    description: Logs and status
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        set -e
        pip install --quiet torch torchvision datasets transformers peft accelerate
        echo '
import argparse
import os

parser = argparse.ArgumentParser()
parser.add_argument("--task_type")
parser.add_argument("--dataset_name")
parser.add_argument("--model_uri")
parser.add_argument("--framework")
parser.add_argument("--output_dir")
parser.add_argument("--trained_model")
parser.add_argument("--training_logs")
parser.add_argument("--epochs", type=int, default=1)
args = parser.parse_args()

os.makedirs(args.trained_model, exist_ok=True)
os.makedirs(args.training_logs, exist_ok=True)

with open(os.path.join(args.training_logs, "log.txt"), "w") as f:
    f.write(f"Framework: {args.framework}\\n")
    f.write(f"Task: {args.task_type}\\n")
    f.write(f"Dataset: {args.dataset_name}\\n")
    f.write(f"Epochs: {args.epochs}\\n")
    f.write("This is a test log to show that inline script executed.\\n")

with open(os.path.join(args.trained_model, "model.txt"), "w") as f:
    f.write("This is a dummy trained model output file.\\n")
    f.write(f"Model URI: {args.model_uri}\\n")
' | python3 - \
  --task_type "$0" \
  --dataset_name "$1" \
  --model_uri "$2" \
  --framework "$3" \
  --output_dir "$4" \
  --trained_model "$5" \
  --training_logs "$6" \
  --epochs "$7"
    args:
      - { inputValue: task_type }
      - { inputValue: dataset_name }
      - { inputValue: model_uri }
      - { inputValue: framework }
      - { inputValue: output_dir }
      - { outputPath: trained_model }
      - { outputPath: training_logs }
      - { inputValue: epochs }
